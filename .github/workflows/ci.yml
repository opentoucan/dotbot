name: ci

on:
  workflow_dispatch:
    inputs:
      image-tag:
        description: 'Container version tag'
        required: true
      helm-version:
        description: "Helm chart version"
        required: false
  push:
    branches: [ "main" ]
    paths:
      - 'src/Bot.Gateway/**'
      - 'src/Xkcd.Job/**'
      - 'src/Xkcd.Sdk/**'
      - 'src/ServiceDefaults/**'
      - '!src/Bot.Gateway/CHANGELOG.md'
      - '!src/Xkcd.Job/CHANGELOG.md'
      - 'tests/**'

env:
  REGISTRY: ghcr.io
  
jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ["Bot.Gateway", "Xkcd.Job"]
        test: ["UnitTests", "FunctionalTests"]
    permissions:
      contents: write
      packages: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Install dependencies
        run: dotnet restore
      - name: Test with dotnet
        run: dotnet test tests/${{ matrix.project }}.${{ matrix.test }} --logger trx --results-directory "TestResults"
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project }}.${{ matrix.test }}-dotnet-results
          path: TestResults
        if: ${{ always() }}
        
  build:
    runs-on: ubuntu-latest
    needs: [tests]
    strategy:
      matrix:
        project: [
          {image: "Bot.Gateway", path: "src/Bot.Gateway/Dockerfile"},
          {image: "Xkcd.Job", path: "src/Xkcd.Job/Dockerfile"},
          {image: "Bot.Gateway.Migration", path: "src/Bot.Gateway/migration.Dockerfile"},
          {image: "Xkcd.Job.Migration", path: "src/Xkcd.Job/migration.Dockerfile"}
        ]
    permissions:
      contents: write
      packages: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
        
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.project.image }}
          tags: |
            type=sha,format=long
            type=raw,value=latest

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          file: ${{ matrix.project.path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
  release-images:
    runs-on: ubuntu-latest
    environment:
      name: 'Production'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.21.6'

      - name: Prep
        id: prep
        run: |
          echo "SEMVER=$(echo '${{ github.event.inputs.image-tag }}' | grep -o -P '(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?')" >> $GITHUB_OUTPUT

      - uses: imjasonh/setup-crane@v0.3
      - run: |
          crane tag "ghcr.io/${{ github.repository_owner }}/bot.gateway:sha-${{ github.sha }}" "${{ steps.prep.outputs.SEMVER }}"
          crane tag "ghcr.io/${{ github.repository_owner }}/xkcd.job:sha-${{ github.sha }}" "${{ steps.prep.outputs.SEMVER }}"
          
  helm-test:
    runs-on: ubuntu-latest
    if: github.event.inputs.helm-version != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - name: Create kind cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@v1.8.0

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --target-branch ${{ github.event.repository.default_branch }}
  
  helm-release:
    needs: helm-test
    permissions:
      contents: write # to push chart release and create a release (helm/chart-releaser-action)
      packages: write # needed for ghcr access
      id-token: write # needed for keyless signing

    runs-on: ubuntu-latest
    environment: 
      name: 'Production'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Prep
        id: prep
        run: |
          echo "SEMVER=$(echo '${{ github.event.inputs.helm-version }}' | grep -o -P '(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?')" >> $GITHUB_OUTPUT

      - name: Fetch history
        run: git fetch --prune --unshallow

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Set up Helm
        uses: azure/setup-helm@v3.5
        with:
          version: v3.12.0

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.PAT }}"
          CR_GENERATE_RELEASE_NOTES: true

      # see https://github.com/helm/chart-releaser/issues/183
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push charts to GHCR
        run: |
          helm push ".cr-release-packages/dotbot-${{ steps.prep.outputs.SEMVER }}.tgz" "oci://ghcr.io/${{ github.repository_owner }}/charts"