nameOverride: ""
fullnameOverride: ""
global:
  env:
    ASPNETCORE_ENVIRONMENT: 'Production'
api:
  replicaCount: 1
  image:
    registry: ghcr.io
    repository: opentoucan/dotbot.api
    tag: 3.2.0@sha256:84a998924406b9efbffdfaac36724b30566e9e53b2926a46f46a70d852424c3d
    imagePullPolicy: IfNotPresent
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    runAsUser: 2048
    runAsGroup: 2048
    fsGroup: 2048
    supplementalGroups: [2048]
  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 2048
    allowPrivilegeEscalation: false
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  volumes: []
  volumeMounts: []

migrator:
  ttlSecondsAfterFinished: 100
  image:
    registry: ghcr.io
    repository: opentoucan/dotbot.migrator
    tag: 3.2.0@sha256:0a4953650a06d02d904e3bfb06358db90704b7090aac29a646719b94368ca3f2
    imagePullPolicy: IfNotPresent
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    runAsUser: 2048
    runAsGroup: 2048
    fsGroup: 2048
    supplementalGroups: [2048]
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 2048
    allowPrivilegeEscalation: false
  volumes:
    - name: cache-volume
      emptyDir:
        sizeLimit: 500Mi
  volumeMounts:
    - mountPath: /cache
      name: cache-volume
  env:
    - name: DOTNET_BUNDLE_EXTRACT_BASE_DIR
      value: /cache

# environment variables for configMap
env: {}
#  RabbitMQ__Endpoint: 'rabbitmq'
#  RabbitMQ__port: '5672'
#  S3__ServiceUrl: 'minio:9000'
#  OTEL_EXPORTER_OTLP_ENDPOINT: 'http://opentelemetry-operator.default.svc.cluster.local:8080'
configMapAnnotations: {}

# Secrets
existingAppSecret: ''
existingMigratorSecret: ''
discord:
  publicKey: ''
  botToken: ''
  webhooks:
    xkcd: ''
appUserDBConnectionString: ''
migratorUserDBConnectionString: ''
rabbitMQCredentials:
  user: 'test'
  password: 'test'
objectStorageCredentials:
  accessKeyId: 'dev'
  secretAccessKey: 'dev'

service:
  name: http
  type: LoadBalancer
  port: 80
  targetPort: 8080
  protocol: TCP

serviceAccount:
  create: true
  annotations: {}

ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
  path: /
  pathType: Prefix
  hosts:
    - dotbot.local
  tls: []

route:
  main:
    # -- Enables or disables the route
    enabled: false

    # -- Set the route apiVersion, e.g. gateway.networking.k8s.io/v1 or gateway.networking.k8s.io/v1alpha2
    apiVersion: gateway.networking.k8s.io/v1
    # -- Set the route kind
    # Valid options are GRPCRoute, HTTPRoute, TCPRoute, TLSRoute, UDPRoute
    kind: HTTPRoute

    annotations: {}
    labels: {}

    hostnames:
      - dotbot.example.com
    parentRefs: []
    # - name: acme-gw

    matches:
      - path:
          type: PathPrefix
          value: /
    filters: []
    additionalRules: []
