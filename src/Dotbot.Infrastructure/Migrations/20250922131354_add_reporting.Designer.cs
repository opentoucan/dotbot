// <auto-generated />
using System;
using Dotbot.Infrastructure;
using Dotbot.Infrastructure.Entities.Reports;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dotbot.Infrastructure.Migrations
{
    [DbContext(typeof(DotbotContext))]
    [Migration("20250922131354_add_reporting")]
    partial class add_reporting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dotbot")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "vehicle_reporting", "fuel_type", new[] { "diesel", "electric", "petrol", "unknown" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "vehicle_reporting", "mot_defect_category", new[] { "advisory", "dangerous", "fail", "major", "minor", "nonspecific", "prs", "systemgenerated", "userentered" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "vehicle_reporting", "odometer_result", new[] { "no_odometer", "read", "unreadable" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "vehicle_reporting", "test_result", new[] { "failed", "passed" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.CommandAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CustomCommandId")
                        .HasColumnType("uuid")
                        .HasColumnName("custom_command_id");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_command_attachments");

                    b.HasIndex("CustomCommandId")
                        .HasDatabaseName("ix_command_attachments_custom_command_id");

                    b.ToTable("command_attachments", "dotbot");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.CustomCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uuid")
                        .HasColumnName("guild_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_custom_commands");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_custom_commands_guild_id");

                    b.ToTable("custom_commands", "dotbot");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.Guild", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_guilds");

                    b.ToTable("guilds", "dotbot");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.Reports.VehicleCommandLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("GuildId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guild_id");

                    b.Property<string>("RegistrationPlate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("registration_plate");

                    b.Property<DateTimeOffset>("RequestDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("request_date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_command_log");

                    b.ToTable("vehicle_command_log", "vehicle_reporting");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.Reports.VehicleInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("Co2InGramPerKilometer")
                        .HasColumnType("integer")
                        .HasColumnName("co2in_gram_per_kilometer");

                    b.Property<string>("Colour")
                        .HasColumnType("text")
                        .HasColumnName("colour");

                    b.Property<decimal?>("EngineCapacityLitres")
                        .HasColumnType("numeric")
                        .HasColumnName("engine_capacity_litres");

                    b.Property<FuelType>("FuelType")
                        .HasColumnType("vehicle_reporting.fuel_type")
                        .HasColumnName("fuel_type");

                    b.Property<DateTimeOffset?>("LastIssuedV5CDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_issued_v5c_date");

                    b.Property<string>("Make")
                        .HasColumnType("text")
                        .HasColumnName("make");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<bool>("PotentiallyScrapped")
                        .HasColumnType("boolean")
                        .HasColumnName("potentially_scrapped");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("registration");

                    b.Property<DateTimeOffset?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<int?>("WeightInKg")
                        .HasColumnType("integer")
                        .HasColumnName("weight_in_kg");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_information");

                    b.HasIndex("Registration")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicle_information_registration");

                    b.ToTable("vehicle_information", "vehicle_reporting");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.Reports.VehicleMotInspectionDefectDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryArea")
                        .HasColumnType("text")
                        .HasColumnName("category_area");

                    b.Property<string>("DefectName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("defect_name");

                    b.Property<string>("DefectReferenceCode")
                        .HasColumnType("text")
                        .HasColumnName("defect_reference_code");

                    b.Property<string>("SubCategoryName")
                        .HasColumnType("text")
                        .HasColumnName("sub_category_name");

                    b.Property<string>("TopLevelCategory")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("top_level_category");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_mot_inspection_defect_definitions");

                    b.ToTable("vehicle_mot_inspection_defect_definitions", "vehicle_reporting");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.Reports.VehicleMotTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_date");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<OdometerResult>("OdometerReadResult")
                        .HasColumnType("vehicle_reporting.odometer_result")
                        .HasColumnName("odometer_read_result");

                    b.Property<int?>("OdometerReadingInMiles")
                        .HasColumnType("integer")
                        .HasColumnName("odometer_reading_in_miles");

                    b.Property<TestResult>("Result")
                        .HasColumnType("vehicle_reporting.test_result")
                        .HasColumnName("result");

                    b.Property<string>("TestNumber")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("test_number");

                    b.Property<Guid?>("VehicleInformationId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_information_id");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_mot_test");

                    b.HasIndex("TestNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicle_mot_test_test_number");

                    b.HasIndex("VehicleInformationId")
                        .HasDatabaseName("ix_vehicle_mot_test_vehicle_information_id");

                    b.ToTable("vehicle_mot_test", "vehicle_reporting");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.Reports.VehicleMotTestDefect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<MotDefectCategory>("Category")
                        .HasColumnType("vehicle_reporting.mot_defect_category")
                        .HasColumnName("category");

                    b.Property<Guid>("DefectDefinitionId")
                        .HasColumnType("uuid")
                        .HasColumnName("defect_definition_id");

                    b.Property<bool>("IsDangerous")
                        .HasColumnType("boolean")
                        .HasColumnName("is_dangerous");

                    b.Property<Guid?>("VehicleMotTestId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_mot_test_id");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_mot_test_defect");

                    b.HasIndex("DefectDefinitionId")
                        .HasDatabaseName("ix_vehicle_mot_test_defect_defect_definition_id");

                    b.HasIndex("VehicleMotTestId")
                        .HasDatabaseName("ix_vehicle_mot_test_defect_vehicle_mot_test_id");

                    b.ToTable("vehicle_mot_test_defect", "vehicle_reporting");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.Xkcd", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ComicNumber")
                        .HasColumnType("integer")
                        .HasColumnName("comic_number");

                    b.Property<DateTimeOffset>("Posted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted");

                    b.HasKey("Id")
                        .HasName("pk_xkcds");

                    b.ToTable("xkcds", "dotbot");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.CommandAttachment", b =>
                {
                    b.HasOne("Dotbot.Infrastructure.Entities.CustomCommand", null)
                        .WithMany("Attachments")
                        .HasForeignKey("CustomCommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_command_attachments_custom_commands_custom_command_id");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.CustomCommand", b =>
                {
                    b.HasOne("Dotbot.Infrastructure.Entities.Guild", null)
                        .WithMany("CustomCommands")
                        .HasForeignKey("GuildId")
                        .HasConstraintName("fk_custom_commands_guilds_guild_id");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.Reports.VehicleInformation", b =>
                {
                    b.OwnsOne("Dotbot.Infrastructure.Entities.Reports.VehicleMotStatus", "MotStatus", b1 =>
                        {
                            b1.Property<Guid>("VehicleInformationId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<bool>("IsExempt")
                                .HasColumnType("boolean")
                                .HasColumnName("mot_status_is_exempt");

                            b1.Property<bool>("IsValid")
                                .HasColumnType("boolean")
                                .HasColumnName("mot_status_is_valid");

                            b1.Property<DateTimeOffset?>("ValidUntil")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("mot_status_valid_until");

                            b1.HasKey("VehicleInformationId");

                            b1.ToTable("vehicle_information", "vehicle_reporting");

                            b1.WithOwner()
                                .HasForeignKey("VehicleInformationId")
                                .HasConstraintName("fk_vehicle_information_vehicle_information_id");
                        });

                    b.OwnsOne("Dotbot.Infrastructure.Entities.Reports.VehicleTaxStatus", "TaxStatus", b1 =>
                        {
                            b1.Property<Guid>("VehicleInformationId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("DvlaTaxStatusText")
                                .HasColumnType("text")
                                .HasColumnName("tax_status_dvla_tax_status_text");

                            b1.Property<bool>("IsExempt")
                                .HasColumnType("boolean")
                                .HasColumnName("tax_status_is_exempt");

                            b1.Property<bool>("IsValid")
                                .HasColumnType("boolean")
                                .HasColumnName("tax_status_is_valid");

                            b1.Property<DateTimeOffset?>("TaxDueDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("tax_status_tax_due_date");

                            b1.HasKey("VehicleInformationId");

                            b1.ToTable("vehicle_information", "vehicle_reporting");

                            b1.WithOwner()
                                .HasForeignKey("VehicleInformationId")
                                .HasConstraintName("fk_vehicle_information_vehicle_information_id");
                        });

                    b.Navigation("MotStatus")
                        .IsRequired();

                    b.Navigation("TaxStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.Reports.VehicleMotTest", b =>
                {
                    b.HasOne("Dotbot.Infrastructure.Entities.Reports.VehicleInformation", null)
                        .WithMany("VehicleMotTests")
                        .HasForeignKey("VehicleInformationId")
                        .HasConstraintName("fk_vehicle_mot_test_vehicle_information_vehicle_information_id");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.Reports.VehicleMotTestDefect", b =>
                {
                    b.HasOne("Dotbot.Infrastructure.Entities.Reports.VehicleMotInspectionDefectDefinition", "DefectDefinition")
                        .WithMany()
                        .HasForeignKey("DefectDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_mot_test_defect_mot_inspection_defect_definitions_d");

                    b.HasOne("Dotbot.Infrastructure.Entities.Reports.VehicleMotTest", null)
                        .WithMany("Defects")
                        .HasForeignKey("VehicleMotTestId")
                        .HasConstraintName("fk_vehicle_mot_test_defect_vehicle_mot_test_vehicle_mot_test_id");

                    b.Navigation("DefectDefinition");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.CustomCommand", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.Guild", b =>
                {
                    b.Navigation("CustomCommands");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.Reports.VehicleInformation", b =>
                {
                    b.Navigation("VehicleMotTests");
                });

            modelBuilder.Entity("Dotbot.Infrastructure.Entities.Reports.VehicleMotTest", b =>
                {
                    b.Navigation("Defects");
                });
#pragma warning restore 612, 618
        }
    }
}
